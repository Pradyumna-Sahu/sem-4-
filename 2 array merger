// Suppose A  [1:n] and B [1:n]  both contain sorted elements in non-decreasing order. Write a program that merges these elements into an array C. What will be the size of array C?

#include <stdio.h>
#define SIZE 5  

void mergeSortedArrays(int A[], int B[], int C[], int n) {
    int i = 0, j = 0, k = 0;

    while (i < n && j < n) {
        if (A[i] <= B[j]) {
            C[k++] = A[i++];  // If A[i] is smaller, add it to C
        } else {
            C[k++] = B[j++];  // If B[j] is smaller, add it to C
        }
    }

    // If there are remaining elements in A, add them to C
    while (i < n) {
        C[k++] = A[i++];
    }

    // If there are remaining elements in B, add them to C
    while (j < n) {
        C[k++] = B[j++];
    }
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int A[SIZE] = {1, 3, 5, 7, 9};
    int B[SIZE] = {2, 4, 6, 8, 10};
    int C[2 * SIZE];  

    mergeSortedArrays(A, B, C, SIZE);

    printf("Merged Array C: \n");
    printArray(C, 2 * SIZE);  // The size of C will be 2n
    printf("Size of Merged Array C: %d\n", 2 * SIZE);

    return 0;
}

/* OUTPUT
Merged Array C: 
1 2 3 4 5 6 7 8 9 10 
Size of Merged Array C: 10
*/
