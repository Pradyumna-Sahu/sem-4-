// We know that if 'n' elements are sorted with merge sort algorithm, the worst case estimation about steps is O(n*logn). Introduce necessary C code in the solution of task-2 to relate 'n' & 'n*logn'. Show the number of steps for each merging operation one by one.

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10

int mergeSortSteps = 0; 

// Function to generate random numbers between 30 and 70
void generateRandomNumbers(int arr[], int n) {
    srand(time(0)); 
    for (int i = 0; i < n; i++) {
        arr[i] = (rand() % 41) + 30; 
    }
}

// Function to print an array
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Merge function for Merge Sort
void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;
    int L[n1], R[n2];

    // Copy data to temporary arrays L[] and R[]
    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    i = 0;
    j = 0;
    k = left;
    
    printf("Merging ranges: [%d..%d] and [%d..%d]\n", left, mid, mid+1, right);  // Debugging line to show the merge range

    // Merge the temporary arrays back into arr[]
    while (i < n1 && j < n2) {
        mergeSortSteps++; // Counting comparisons
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy remaining elements of L[] if any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
        mergeSortSteps++; // Counting copy operations
    }

    // Copy remaining elements of R[] if any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
        mergeSortSteps++; // Counting copy operations
    }

    // Debugging: Print the array after merge
    printf("Array after merge: ");
    printArray(arr, right - left + 1);
}

// Recursive Merge Sort function
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        // Recursively sort first and second halves
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        // Merge the sorted halves
        merge(arr, left, mid, right);
    }
}

int main() {
    int ARR[SIZE];

    // Generate and display random numbers
    generateRandomNumbers(ARR, SIZE);
    printf("Unsorted Array:\n");
    printArray(ARR, SIZE);

    // Reset step count and apply Merge Sort
    mergeSortSteps = 0;
    mergeSort(ARR, 0, SIZE - 1);

    // Display sorted array and step count
    printf("Sorted Array:\n");
    printArray(ARR, SIZE);
    printf("Number of steps taken in Merge Sort: %d\n", mergeSortSteps);
    
    return 0;
}

/* OUTPUT
Unsorted Array:
34 43 67 40 57 36 51 60 46 59 
Merging ranges: [0..0] and [1..1]
Array after merge: 34 43 
Merging ranges: [0..1] and [2..2]
Array after merge: 34 43 67 
Merging ranges: [3..3] and [4..4]
Array after merge: 34 43 
Merging ranges: [0..2] and [3..4]
Array after merge: 34 40 43 57 67 
Merging ranges: [5..5] and [6..6]
Array after merge: 34 40 
Merging ranges: [5..6] and [7..7]
Array after merge: 34 40 43 
Merging ranges: [8..8] and [9..9]
Array after merge: 34 40 
Merging ranges: [5..7] and [8..9]
Array after merge: 34 40 43 57 67 
Merging ranges: [0..4] and [5..9]
Array after merge: 34 36 40 43 46 51 57 59 60 67 
Sorted Array:
34 36 40 43 46 51 57 59 60 67 
Number of steps taken in Merge Sort: 34
*/
